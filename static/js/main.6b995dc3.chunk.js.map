{"version":3,"sources":["components/GameTile.jsx","components/GameBoard.jsx","functions/fetchCredentials.jsx","App.js","reportWebVitals.js","index.js"],"names":["GameTile","props","className","highlighted","onClick","callbackFunc","x","y","occupied","icon","id","AWS","require","GameBoard","useState","position","setPosition","setError","tiles","setTiles","acceptNewMoves","setAcceptNewMoves","invokeUrl","submitMove","useCallback","newPosition","a","Promise","resolve","setTimeout","Date","now","time","dateFormat","Axios","post","movePosition","headers","UserId","config","credentials","identityId","then","response","console","log","data","gameStatus","window","location","reload","catch","error","createBoard","tileArray","i","height","j","width","push","map","coords","useEffect","err","startGame","style","gridTemplate","refreshCredentials","refreshPromise","expireTime","library","add","fab","faCrown","faFortAwesome","region","CognitoIdentityCredentials","IdentityPoolId","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b995dc3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './GameTile.css';\r\n\r\nexport default function GameTile(props) {\r\n  function handleClick() {\r\n    if (!props.highlighted) {\r\n      return;\r\n    }\r\n    props.callbackFunc({ x: props.x, y: props.y });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`game-tile ${props.highlighted ? 'highlighted' : ''}`}\r\n      onClick={handleClick}\r\n    >\r\n      {props.occupied && <FontAwesomeIcon icon=\"crown\" id=\"crown-icon\" />}\r\n      {props.x === 0 && props.y === 0 && (\r\n        <FontAwesomeIcon\r\n          icon={['fab', 'fort-awesome']}\r\n          id=\"castle-icon\"\r\n          className={props.occupied ? 'captured' : ''}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from 'react';\r\nimport Axios from 'axios';\r\nimport dateFormat from 'dateformat';\r\nimport GameTile from './GameTile';\r\nimport './GameBoard.css';\r\nimport { useEffect } from 'react';\r\n\r\nconst AWS = require('aws-sdk');\r\n\r\nexport default function GameBoard(props) {\r\n  const [position, setPosition] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [tiles, setTiles] = useState(null);\r\n  const [acceptNewMoves, setAcceptNewMoves] = useState(true);\r\n\r\n  const invokeUrl = 'https://6k6fezitqe.execute-api.us-west-1.amazonaws.com/';\r\n\r\n  function startGame() {\r\n    var time = Date.now();\r\n    time = dateFormat(Date.now(), 'yyyymmdd\"T\"hhMMss\"Z\"');\r\n    Axios.post(\r\n      invokeUrl + 'startGame',\r\n      {},\r\n      {\r\n        headers: {\r\n          UserId: AWS.config.credentials.identityId,\r\n          'X-Amz-Date': time,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        setPosition({\r\n          x: response.data.position.x,\r\n          y: response.data.position.y,\r\n        });\r\n        setError(null);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setError(err);\r\n      });\r\n  }\r\n\r\n  const submitMove = useCallback(\r\n    async (newPosition) => {\r\n      if (!acceptNewMoves) {\r\n        return;\r\n      }\r\n      setAcceptNewMoves(false);\r\n      setPosition(newPosition);\r\n      await new Promise((resolve) => setTimeout(resolve, 300));\r\n      var time = Date.now();\r\n      time = dateFormat(Date.now(), 'yyyymmdd\"T\"hhMMss\"Z\"');\r\n      Axios.post(\r\n        invokeUrl + 'submitMove',\r\n        { movePosition: newPosition },\r\n        {\r\n          headers: {\r\n            UserId: AWS.config.credentials.identityId,\r\n            'X-Amz-Date': time,\r\n          },\r\n        }\r\n      )\r\n        .then(async (response) => {\r\n          console.log(response);\r\n          setAcceptNewMoves(true);\r\n          setError(null);\r\n          setPosition({\r\n            x: response.data.position.x,\r\n            y: response.data.position.y,\r\n          });\r\n          if (response.data.gameStatus !== 'IN_PROGRESS') {\r\n            await new Promise((resolve) => setTimeout(resolve, 500));\r\n            window.location.reload(false);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setError(null);\r\n        });\r\n    },\r\n    [acceptNewMoves]\r\n  );\r\n\r\n  const createBoard = useCallback(() => {\r\n    let tileArray = [];\r\n    for (let i = props.height - 1; i >= 0; i--) {\r\n      for (let j = 0; j < props.width; j++) {\r\n        tileArray.push([j, i]);\r\n      }\r\n    }\r\n    setTiles(\r\n      tileArray.map((coords) => (\r\n        <GameTile\r\n          x={coords[0]}\r\n          y={coords[1]}\r\n          key={coords[1] * props.width + coords[0]}\r\n          highlighted={\r\n            position &&\r\n            coords[0] <= position.x && // only highlight cells left of queen\r\n            coords[1] <= position.y && // only highlight cells below queen\r\n            (coords[0] === position.x || // highlight cells in same column as queen\r\n              coords[1] === position.y || // highlight cells in same row as queen\r\n              coords[0] - coords[1] === position.x - position.y) && // highlight cells diagonal from queen\r\n            !(coords[0] === position.x && coords[1] === position.y) // don't highlight queen\r\n          }\r\n          occupied={\r\n            position && coords[0] === position.x && coords[1] === position.y\r\n          }\r\n          callbackFunc={submitMove}\r\n        />\r\n      ))\r\n    );\r\n  }, [props.width, props.height, position, submitMove]);\r\n\r\n  useEffect(() => {\r\n    startGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    createBoard();\r\n  }, [position, createBoard]);\r\n\r\n  return (\r\n    <div\r\n      id=\"gameboard\"\r\n      style={{\r\n        gridTemplate:\r\n          'repeat(' +\r\n          props.height +\r\n          ', 1fr) / repeat(' +\r\n          props.width +\r\n          ', 1fr)',\r\n      }}\r\n    >\r\n      {tiles}\r\n    </div>\r\n  );\r\n}\r\n","const AWS = require('aws-sdk');\r\n\r\nasync function refreshCredentials() {\r\n  await AWS.config.credentials.refreshPromise();\r\n  console.log(AWS.config.credentials);\r\n  // schedule the next credential refresh when they're about to expire\r\n  setTimeout(\r\n    refreshCredentials,\r\n    AWS.config.credentials.expireTime - new Date()\r\n  );\r\n}\r\n\r\nexport default function fetchCredentials() {\r\n  refreshCredentials();\r\n  console.log(AWS.config.credentials);\r\n}\r\n","import './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCrown } from '@fortawesome/free-solid-svg-icons';\nimport { fab, faFortAwesome } from '@fortawesome/free-brands-svg-icons';\nimport GameBoard from './components/GameBoard';\nimport useFetchCredentials from './functions/fetchCredentials';\n\nlibrary.add(fab, faCrown, faFortAwesome);\n\nconst AWS = require('aws-sdk');\nAWS.config.region = 'us-west-1';\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: 'us-west-1:4f4c2491-7c42-4063-aad0-1ea855da82b9',\n});\n\nfunction App() {\n  useFetchCredentials();\n\n  return (\n    <div className=\"App\">\n      <h1>Wythoff's Queen</h1>\n      <GameBoard width={25} height={25} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}